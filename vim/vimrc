" Don't try to be vi compatible.
set nocompatible

" Helps force plugins to load correctly when it is turned back on below.
filetype off


" Specify a directory for plugins.
call plug#begin('~/.vim/plugged')

Plug 'tomasiser/vim-code-dark'
Plug 'vim-airline/vim-airline'
Plug 'vimwiki/vimwiki'

Plug 'junegunn/fzf', { 'do': { -> fzf#install() } }
Plug 'junegunn/fzf.vim'

Plug '907th/vim-auto-save'
Plug 'kana/vim-arpeggio'

" Initialize plugin system.
call plug#end()

" Note:
" Reload .vimrc and :PlugInstall to install plugins.


" Customize netrw
" From: http://ellengummesson.com/blog/2014/02/22/make-vim-really-behave-like-netrw/
" And: https://shapeshed.com/vim-netrw/#vim-vinegar
" let g:netrw_banner = 0
let g:netrw_liststyle = 3
" let g:netrw_browse_split = 4
" let g:netrw_altv = 1
" let g:netrw_winsize = 25

" let g:netrw_list_hide = &wildignore

" augroup ProjectDrawer
"   autocmd!
"   autocmd VimEnter * :Vexplore
" augroup END


" Enable syntax highlighting.
syntax on

" Help plugins load correctly.
filetype plugin indent on

" Use the OS clipboard by default.
" See: https://stackoverflow.com/questions/30691466/what-is-difference-between-vims-clipboard-unnamed-and-unnamedplus-settings
set clipboard^=unnamed,unnamedplus

" Remap leader key.
nnoremap <SPACE> <Nop>
let mapleader = "\<Space>"

" Ignore mode lines.
set modelines=0

" Show line numbers.
set number

" Use relative line numbers.
set relativenumber

" Show file stats.
set ruler

" Blink cursor on error instead of beeping.
set visualbell

" Disable error bells
set noerrorbells

" Encoding.
set encoding=utf-8 nobomb

" Enable mouse in all modes
set mouse=a

" Don't wrap lines.
set nowrap

" Do not automatically wrap text when typing.
set formatoptions-=t

" Indent according to previous line.
set autoindent

" Use spaces instead of tabs.
set expandtab

" Tab key indents by 4 spaces.
set softtabstop=4

" >> indents by 4 spaces.
set shiftwidth=4

" >> indents to next multiple of 'shiftwidth'.
set shiftround

" Make backspace work as you would expect.
set backspace=indent,eol,start

" Switch between buffers without having to save first.
set hidden

" The minimum lines above and below the cursor.
set scrolloff=2

" Always show statusline.
set laststatus=2

" Show as much as possible of the last line.
set display=lastline

" Don’t show the intro message when starting Vim.
set shortmess=atI

" Show current mode in command-line.
set showmode

" Show already typed keys when more are expected.
set showcmd

" Highlight while searching with / or ?.
set incsearch

" Keep matches highlighted.
" set hlsearch

" Become case-sensitive when caps are used.
set smartcase

" Substitute globall by default.
set gdefault

" Faster redrawing.
set ttyfast

" Only redraw when necessary.
set lazyredraw

" Open new windows below the current window.
set splitbelow

" Open new windows right of the current window.
set splitright

" Searches wrap around end-of-file.
set wrapscan

" Always report changed lines.
set report=0

" Only highlight the first 200 columns.
set synmaxcol=200

" Draw guides at columns 80 and 100.
set colorcolumn=80,100

" Show the filename in the window titlebar
set title


" Show non-printable characters.
set list
if has('multi_byte') && &encoding ==# 'utf-8'
  let &listchars = 'tab:▸ ,extends:❯,precedes:❮,nbsp:±'
else
  let &listchars = 'tab:> ,extends:>,precedes:<,nbsp:.'
endif

" The fish shell is not very compatible to other shells and unexpectedly
" breaks things that use 'shell'.
if &shell =~# 'fish$'
  set shell=/bin/bash
endif

" Put all temporary files under the same directory.
if isdirectory($HOME . '/.vim/files') == 0
    :silent !mkdir -p ~/.vim/files/{backup,swap,undo,info} > /dev/null 2>&1
endif

set backup
set backupdir=$HOME/.vim/files/backup/
set backupext=-vimbackup
set backupskip=
set directory=$HOME/.vim/files/swap/
set updatecount=200
set undofile
set undodir=$HOME/.vim/files/undo/
set viminfo='100,n$HOME/.vim/files/info/viminfo


" Color scheme.
colorscheme codedark
let g:airline_theme = 'codedark'


" Use Markdown with VimWiki
let g:vimwiki_list = [{'path': '~/vimwiki/', 'syntax': 'markdown', 'ext': '.md'}]


" Enable AutoSave on Vim startup.
let g:auto_save = 1

" Do not display the auto-save notification.
let g:auto_save_silent = 1


" Automatically save when switching buffers.
set autowrite
set autowriteall

" Automatically save when losing focus.
:au FocusLost * :wa


" Chords
" Use jk as escape.
call arpeggio#map('i', '', 0, 'jk', '<Esc>')

call arpeggio#map('i', '', 0, 'df', 'def ')
call arpeggio#map('i', '', 0, 'cl', 'class ')

" Type 'we' in normal mode to open netrw.
call arpeggio#map('n', '', 0, 'we', ':Explore<return>')




" FROM: https://github.com/skwp/dotfiles/blob/master/vim/settings/yadr-window-killer.vim
" Use <leader>q to intelligently close a window
" (if there are multiple windows into the same buffer)
" or kill the buffer entirely if it's the last window looking into that buffer
function! CloseWindowOrKillBuffer()
  let number_of_windows_to_this_buffer = len(filter(range(1, winnr('$')), "winbufnr(v:val) == bufnr('%')"))

  " We should never bdelete a nerd tree
  if matchstr(expand("%"), 'NERD') == 'NERD'
    wincmd c
    return
  endif

  if number_of_windows_to_this_buffer > 1
    wincmd c
  else
    bdelete
  endif
endfunction

nnoremap <silent> <leader>q :call CloseWindowOrKillBuffer()<CR>
